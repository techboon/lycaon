<?xml version="1.0"?>
<ruleset name="LycaonCodeSniffRuleSet">
  <description>code sniff rules.</description>
  <arg name="basepath" value="."/>
  <arg name="colors" />
  <arg name="parallel" value="75" />
  <arg value="np"/>
  <arg name="tab-width" value="4"/>

  <!-- Generic -->
  <rule ref="Generic.ControlStructures.InlineControlStructure"/>
  <rule ref="Generic.Files.ByteOrderMark"/>
  <rule ref="Generic.Files.InlineHTML"/>
  <rule ref="Generic.Files.LineEndings">
    <properties>
      <property name="eolChar" value="\n"/>
    </properties>
  </rule>
  <rule ref="Generic.Files.OneClassPerFile"/>
  <rule ref="Generic.Files.OneInterfacePerFile"/>
  <rule ref="Generic.Files.OneTraitPerFile"/>
  <rule ref="Generic.Formatting.MultipleStatementAlignment"/>
  <rule ref="Generic.Formatting.MultipleStatementAlignment.NotSameWarning">
    <severity>0</severity>
  </rule>
  <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
  <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
  <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
  <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
    <severity>0</severity>
  </rule>
  <rule ref="Generic.PHP.LowerCaseConstant"/>
  <rule ref="Generic.PHP.LowerCaseKeyword"/>
  <rule ref="Generic.PHP.Syntax"/>
  <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="tabIndent" value="false"/>
      <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
    </properties>
  </rule>
  <!-- PEAR -->
  <rule ref="PEAR.Commenting.InlineComment"/>
  <rule ref="PEAR.Functions.ValidDefaultValue"/>
  <!-- PSR1 -->
  <rule ref="PSR1.Files.SideEffects"/>
  <rule ref="PSR1.Methods.CamelCapsMethodName"/>
  <!-- PSR2 -->
  <rule ref="PSR2.Classes.ClassDeclaration"/>
  <rule ref="PSR2.Classes.PropertyDeclaration"/>
  <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>
  <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
  <rule ref="PSR2.Files.ClosingTag"/>
  <rule ref="PSR2.Files.EndFileNewline"/>
  <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
    <severity>0</severity>
  </rule>
  <rule ref="PSR2.Methods.MethodDeclaration"/>
  <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
  <rule ref="PSR2.Namespaces.UseDeclaration"/>
  <!-- Squiz -->
  <rule ref="Squiz.Classes.ValidClassName"/>
  <rule ref="Squiz.ControlStructures.ControlSignature"/>
  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
  <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
  <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
    </properties>
  </rule>
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Functions.FunctionDeclaration"/>
  <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
  <rule ref="Squiz.Scope.MethodScope"/>
  <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
  <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
  <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
    <properties>
      <property name="ignoreBlankLines" value="true"/>
    </properties>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
    <severity>0</severity>
  </rule>
</ruleset>
